<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="_utilities_8cpp" kind="file" language="C++">
    <compoundname>Utilities.cpp</compoundname>
    <includes refid="_utilities_8h" local="yes">Utilities.h</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="15">
        <label>cmath</label>
      </node>
      <node id="9">
        <label>cassert</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="10">
        <label>fstream</label>
      </node>
      <node id="3">
        <label>PrefixHeader.pch</label>
        <link refid="_prefix_header_8pch"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="12">
        <label>typeinfo</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="1">
        <label>Utilities.cpp</label>
        <link refid="_utilities_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>unordered_map</label>
      </node>
      <node id="2">
        <label>Utilities.h</label>
        <link refid="_utilities_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_utilities_8h" kindref="compound">Utilities.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="namespace_utilities_1a0257a93580460c13c4af232704caa0dc" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_utilities_1a0257a93580460c13c4af232704caa0dc" kindref="member">Utilities::RoundOff</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_value<sp/>)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simply<sp/>uses<sp/>floor<sp/>function<sp/>currently.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(a_value));</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="namespace_utilities_1a80b350cec72abbcf34ad7e28405d531c" refkind="member"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_utilities_1a80b350cec72abbcf34ad7e28405d531c" kindref="member">Utilities::GetAverage</ref>(<sp/>std::vector&lt;double&gt;<sp/>a_list<sp/>)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>:<sp/>a_list)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_sum<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t_sum<sp/>/<sp/>a_list.size();</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="namespace_utilities_1a175ab95f5c509ccc3d4b571e8963f22e" refkind="member"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_utilities_1a175ab95f5c509ccc3d4b571e8963f22e" kindref="member">Utilities::GetStandardDeviation</ref>(<sp/>std::vector&lt;double&gt;<sp/>a_list,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_average)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>square<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_diff;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_val<sp/>:<sp/>a_list)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_diff<sp/>+=<sp/>std::pow(t_val<sp/>-<sp/>a_average,<sp/>2);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>t_diff<sp/>/=<sp/>a_list.size();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(t_diff);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="namespace_utilities_1a0ab4e4bfac17a04ab38640746aba42fe" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_utilities_1a0ab4e4bfac17a04ab38640746aba42fe" kindref="member">Utilities::trimBlanks</ref>(<sp/>std::string<sp/>&amp;a_str<sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>t_lead<sp/>=<sp/>a_str.find_first_not_of(</highlight><highlight class="stringliteral">&quot;<sp/>\t\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>a_str<sp/>=<sp/>a_str.substr(t_lead,<sp/>a_str.find_last_not_of(</highlight><highlight class="stringliteral">&quot;<sp/>\t\n&quot;</highlight><highlight class="normal">)<sp/>-<sp/>t_lead<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Utilities.cpp"/>
  </compounddef>
</doxygen>
